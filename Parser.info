-----------------------------------------------------------------------------
Info file generated by Happy Version 1.14 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_happyParse -> prog                          (0)
	prog ->                                            (1)
	prog -> bind ';' prog                              (2)
	bind -> VAR '=' expr                               (3)
	expr -> expr1 '+' expr                             (4)
	expr -> expr2                                      (5)
	expr2 -> 'let' bind 'in' expr                      (6)
	expr2 -> 'scc' VAR expr                            (7)
	expr2 -> expr1                                     (8)
	expr1 -> expr1 VAR                                 (9)
	expr1 -> expr0                                     (10)
	expr0 -> VAR                                       (11)
	expr0 -> INT                                       (12)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'let'          { Let }
	'in'           { In }
	'scc'          { Scc }
	'+'            { Sym '+' }
	'='            { Sym '=' }
	';'            { Sym ';' }
	VAR            { Var $$ }
	INT            { Int $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_happyParserule  0
	prog           rules 1, 2
	bind           rule  3
	expr           rules 4, 5
	expr2          rules 6, 7, 8
	expr1          rules 9, 10
	expr0          rules 11, 12

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	VAR            shift, and enter state 4
	%eof           reduce using rule 1

	prog           goto state 2
	bind           goto state 3

State 1




State 2

	%start_happyParse -> prog .                         (rule 0)

	%eof           accept


State 3

	prog -> bind . ';' prog                             (rule 2)

	';'            shift, and enter state 6


State 4

	bind -> VAR . '=' expr                              (rule 3)

	'='            shift, and enter state 5


State 5

	bind -> VAR '=' . expr                              (rule 3)

	'let'          shift, and enter state 12
	'scc'          shift, and enter state 13
	VAR            shift, and enter state 14
	INT            shift, and enter state 15

	expr           goto state 8
	expr2          goto state 9
	expr1          goto state 10
	expr0          goto state 11

State 6

	prog -> bind ';' . prog                             (rule 2)

	VAR            shift, and enter state 4
	%eof           reduce using rule 1

	prog           goto state 7
	bind           goto state 3

State 7

	prog -> bind ';' prog .                             (rule 2)

	%eof           reduce using rule 2


State 8

	bind -> VAR '=' expr .                              (rule 3)

	'in'           reduce using rule 3
	';'            reduce using rule 3


State 9

	expr -> expr2 .                                     (rule 5)

	'in'           reduce using rule 5
	';'            reduce using rule 5


State 10

	expr -> expr1 . '+' expr                            (rule 4)
	expr2 -> expr1 .                                    (rule 8)
	expr1 -> expr1 . VAR                                (rule 9)

	'in'           reduce using rule 8
	'+'            shift, and enter state 18
	';'            reduce using rule 8
	VAR            shift, and enter state 19


State 11

	expr1 -> expr0 .                                    (rule 10)

	'in'           reduce using rule 10
	'+'            reduce using rule 10
	';'            reduce using rule 10
	VAR            reduce using rule 10


State 12

	expr2 -> 'let' . bind 'in' expr                     (rule 6)

	VAR            shift, and enter state 4

	bind           goto state 17

State 13

	expr2 -> 'scc' . VAR expr                           (rule 7)

	VAR            shift, and enter state 16


State 14

	expr0 -> VAR .                                      (rule 11)

	'in'           reduce using rule 11
	'+'            reduce using rule 11
	';'            reduce using rule 11
	VAR            reduce using rule 11


State 15

	expr0 -> INT .                                      (rule 12)

	'in'           reduce using rule 12
	'+'            reduce using rule 12
	';'            reduce using rule 12
	VAR            reduce using rule 12


State 16

	expr2 -> 'scc' VAR . expr                           (rule 7)

	'let'          shift, and enter state 12
	'scc'          shift, and enter state 13
	VAR            shift, and enter state 14
	INT            shift, and enter state 15

	expr           goto state 22
	expr2          goto state 9
	expr1          goto state 10
	expr0          goto state 11

State 17

	expr2 -> 'let' bind . 'in' expr                     (rule 6)

	'in'           shift, and enter state 21


State 18

	expr -> expr1 '+' . expr                            (rule 4)

	'let'          shift, and enter state 12
	'scc'          shift, and enter state 13
	VAR            shift, and enter state 14
	INT            shift, and enter state 15

	expr           goto state 20
	expr2          goto state 9
	expr1          goto state 10
	expr0          goto state 11

State 19

	expr1 -> expr1 VAR .                                (rule 9)

	'in'           reduce using rule 9
	'+'            reduce using rule 9
	';'            reduce using rule 9
	VAR            reduce using rule 9


State 20

	expr -> expr1 '+' expr .                            (rule 4)

	'in'           reduce using rule 4
	';'            reduce using rule 4


State 21

	expr2 -> 'let' bind 'in' . expr                     (rule 6)

	'let'          shift, and enter state 12
	'scc'          shift, and enter state 13
	VAR            shift, and enter state 14
	INT            shift, and enter state 15

	expr           goto state 23
	expr2          goto state 9
	expr1          goto state 10
	expr0          goto state 11

State 22

	expr2 -> 'scc' VAR expr .                           (rule 7)

	'in'           reduce using rule 7
	';'            reduce using rule 7


State 23

	expr2 -> 'let' bind 'in' expr .                     (rule 6)

	'in'           reduce using rule 6
	';'            reduce using rule 6


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 13
Number of terminals: 8
Number of non-terminals: 7
Number of states: 24
